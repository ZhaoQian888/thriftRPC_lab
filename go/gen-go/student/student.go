// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package student

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Sno
//  - Sname
//  - Ssex
//  - Sage
type Student struct {
  Sno int32 `thrift:"sno,1" db:"sno" json:"sno"`
  Sname string `thrift:"sname,2" db:"sname" json:"sname"`
  Ssex bool `thrift:"ssex,3" db:"ssex" json:"ssex"`
  Sage int16 `thrift:"sage,4" db:"sage" json:"sage"`
}

func NewStudent() *Student {
  return &Student{}
}


func (p *Student) GetSno() int32 {
  return p.Sno
}

func (p *Student) GetSname() string {
  return p.Sname
}

func (p *Student) GetSsex() bool {
  return p.Ssex
}

func (p *Student) GetSage() int16 {
  return p.Sage
}
func (p *Student) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Student)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sno = v
}
  return nil
}

func (p *Student)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sname = v
}
  return nil
}

func (p *Student)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ssex = v
}
  return nil
}

func (p *Student)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sage = v
}
  return nil
}

func (p *Student) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Student"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Student) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sno", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sno: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sno)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sno (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sno: ", p), err) }
  return err
}

func (p *Student) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sname: ", p), err) }
  if err := oprot.WriteString(string(p.Sname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sname: ", p), err) }
  return err
}

func (p *Student) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ssex", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssex: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ssex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssex: ", p), err) }
  return err
}

func (p *Student) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sage", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sage: ", p), err) }
  if err := oprot.WriteI16(int16(p.Sage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sage: ", p), err) }
  return err
}

func (p *Student) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Student(%+v)", *p)
}

type Serv interface {
  // Parameters:
  //  - S
  Put(ctx context.Context, s *Student) (err error)
  // Parameters:
  //  - S
  Icall(ctx context.Context, s *Student) (r int32, err error)
  // Parameters:
  //  - S
  Scall(ctx context.Context, s *Student) (r string, err error)
  // Parameters:
  //  - S
  Stcall(ctx context.Context, s *Student) (r *Student, err error)
}

type ServClient struct {
  c thrift.TClient
}

func NewServClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServClient {
  return &ServClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewServClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServClient {
  return &ServClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewServClient(c thrift.TClient) *ServClient {
  return &ServClient{
    c: c,
  }
}

func (p *ServClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - S
func (p *ServClient) Put(ctx context.Context, s *Student) (err error) {
  var _args0 ServPutArgs
  _args0.S = s
  var _result1 ServPutResult
  if err = p.Client_().Call(ctx, "put", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - S
func (p *ServClient) Icall(ctx context.Context, s *Student) (r int32, err error) {
  var _args2 ServIcallArgs
  _args2.S = s
  var _result3 ServIcallResult
  if err = p.Client_().Call(ctx, "icall", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - S
func (p *ServClient) Scall(ctx context.Context, s *Student) (r string, err error) {
  var _args4 ServScallArgs
  _args4.S = s
  var _result5 ServScallResult
  if err = p.Client_().Call(ctx, "scall", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - S
func (p *ServClient) Stcall(ctx context.Context, s *Student) (r *Student, err error) {
  var _args6 ServStcallArgs
  _args6.S = s
  var _result7 ServStcallResult
  if err = p.Client_().Call(ctx, "stcall", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type ServProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Serv
}

func (p *ServProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ServProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ServProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewServProcessor(handler Serv) *ServProcessor {

  self8 := &ServProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["put"] = &servProcessorPut{handler:handler}
  self8.processorMap["icall"] = &servProcessorIcall{handler:handler}
  self8.processorMap["scall"] = &servProcessorScall{handler:handler}
  self8.processorMap["stcall"] = &servProcessorStcall{handler:handler}
return self8
}

func (p *ServProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x9

}

type servProcessorPut struct {
  handler Serv
}

func (p *servProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServPutResult{}
  var err2 error
  if err2 = p.handler.Put(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type servProcessorIcall struct {
  handler Serv
}

func (p *servProcessorIcall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServIcallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("icall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServIcallResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Icall(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing icall: " + err2.Error())
    oprot.WriteMessageBegin("icall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("icall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type servProcessorScall struct {
  handler Serv
}

func (p *servProcessorScall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServScallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServScallResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Scall(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scall: " + err2.Error())
    oprot.WriteMessageBegin("scall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("scall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type servProcessorStcall struct {
  handler Serv
}

func (p *servProcessorStcall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ServStcallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("stcall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ServStcallResult{}
var retval *Student
  var err2 error
  if retval, err2 = p.handler.Stcall(ctx, args.S); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stcall: " + err2.Error())
    oprot.WriteMessageBegin("stcall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("stcall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - S
type ServPutArgs struct {
  S *Student `thrift:"s,1" db:"s" json:"s"`
}

func NewServPutArgs() *ServPutArgs {
  return &ServPutArgs{}
}

var ServPutArgs_S_DEFAULT *Student
func (p *ServPutArgs) GetS() *Student {
  if !p.IsSetS() {
    return ServPutArgs_S_DEFAULT
  }
return p.S
}
func (p *ServPutArgs) IsSetS() bool {
  return p.S != nil
}

func (p *ServPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Student{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *ServPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *ServPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServPutArgs(%+v)", *p)
}

type ServPutResult struct {
}

func NewServPutResult() *ServPutResult {
  return &ServPutResult{}
}

func (p *ServPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServPutResult(%+v)", *p)
}

// Attributes:
//  - S
type ServIcallArgs struct {
  S *Student `thrift:"s,1" db:"s" json:"s"`
}

func NewServIcallArgs() *ServIcallArgs {
  return &ServIcallArgs{}
}

var ServIcallArgs_S_DEFAULT *Student
func (p *ServIcallArgs) GetS() *Student {
  if !p.IsSetS() {
    return ServIcallArgs_S_DEFAULT
  }
return p.S
}
func (p *ServIcallArgs) IsSetS() bool {
  return p.S != nil
}

func (p *ServIcallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServIcallArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Student{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *ServIcallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("icall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServIcallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *ServIcallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServIcallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServIcallResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServIcallResult() *ServIcallResult {
  return &ServIcallResult{}
}

var ServIcallResult_Success_DEFAULT int32
func (p *ServIcallResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ServIcallResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ServIcallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServIcallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServIcallResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ServIcallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("icall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServIcallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServIcallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServIcallResult(%+v)", *p)
}

// Attributes:
//  - S
type ServScallArgs struct {
  S *Student `thrift:"s,1" db:"s" json:"s"`
}

func NewServScallArgs() *ServScallArgs {
  return &ServScallArgs{}
}

var ServScallArgs_S_DEFAULT *Student
func (p *ServScallArgs) GetS() *Student {
  if !p.IsSetS() {
    return ServScallArgs_S_DEFAULT
  }
return p.S
}
func (p *ServScallArgs) IsSetS() bool {
  return p.S != nil
}

func (p *ServScallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServScallArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Student{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *ServScallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("scall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServScallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *ServScallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServScallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServScallResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServScallResult() *ServScallResult {
  return &ServScallResult{}
}

var ServScallResult_Success_DEFAULT string
func (p *ServScallResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ServScallResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ServScallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServScallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServScallResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ServScallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("scall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServScallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServScallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServScallResult(%+v)", *p)
}

// Attributes:
//  - S
type ServStcallArgs struct {
  S *Student `thrift:"s,1" db:"s" json:"s"`
}

func NewServStcallArgs() *ServStcallArgs {
  return &ServStcallArgs{}
}

var ServStcallArgs_S_DEFAULT *Student
func (p *ServStcallArgs) GetS() *Student {
  if !p.IsSetS() {
    return ServStcallArgs_S_DEFAULT
  }
return p.S
}
func (p *ServStcallArgs) IsSetS() bool {
  return p.S != nil
}

func (p *ServStcallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServStcallArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.S = &Student{}
  if err := p.S.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.S), err)
  }
  return nil
}

func (p *ServStcallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stcall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServStcallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("s", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := p.S.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.S), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *ServStcallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServStcallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ServStcallResult struct {
  Success *Student `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewServStcallResult() *ServStcallResult {
  return &ServStcallResult{}
}

var ServStcallResult_Success_DEFAULT *Student
func (p *ServStcallResult) GetSuccess() *Student {
  if !p.IsSetSuccess() {
    return ServStcallResult_Success_DEFAULT
  }
return p.Success
}
func (p *ServStcallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ServStcallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServStcallResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Student{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ServStcallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("stcall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServStcallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ServStcallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServStcallResult(%+v)", *p)
}


